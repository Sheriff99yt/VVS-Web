{
    "version": 1,
    "languages": ["typescript", "python", "java", "rust"],
    "functions": [
        {
            "id": 1,
            "name": "arrayLength",
            "category": "array",
            "description": "Get the length of an array",
            "implementations": {
                "typescript": {
                    "modifiers": {
                        "access": "public",
                        "static": true,
                        "readonly": true
                    },
                    "signature": {
                        "returnType": "number",
                        "generics": {
                            "parameters": ["T"]
                        }
                    },
                    "parameters": [
                        {
                            "text": "array: T[]",
                            "optional": true
                        }
                    ],
                    "body": {
                        "validation": "if (!array) return 0;",
                        "typeGuards": "if (!Array.isArray(array)) return 0;",
                        "implementation": "return array.length;"
                    }
                },
                "python": {
                    "decorators": ["@staticmethod", "@overload"],
                    "signature": {
                        "returnType": "int",
                        "generics": {
                            "parameters": ["T"]
                        }
                    },
                    "parameters": [
                        {
                            "text": "array: list[T]",
                            "default": "None"
                        }
                    ],
                    "body": {
                        "validation": "if not array: return 0",
                        "typeGuards": "if not isinstance(array, list): return 0",
                        "implementation": "return len(array)"
                    }
                },
                "java": {
                    "modifiers": {
                        "access": "public",
                        "static": true,
                        "final": true
                    },
                    "signature": {
                        "returnType": "int",
                        "generics": {
                            "parameters": ["T"],
                            "constraints": "extends Object"
                        },
                        "throws": ["NullPointerException"]
                    },
                    "parameters": [
                        {
                            "text": "T[] array",
                            "annotations": ["@NotNull"]
                        }
                    ],
                    "body": {
                        "validation": "if (array == null) throw new NullPointerException();",
                        "implementation": "return array.length;",
                        "errorHandling": "try { } catch (Exception e) { return 0; }"
                    }
                },
                "rust": {
                    "modifiers": {
                        "access": "pub",
                        "const": true
                    },
                    "signature": {
                        "returnType": "usize",
                        "generics": {
                            "parameters": ["T"],
                            "constraints": "where T: Sized",
                            "lifetime": "'a"
                        },
                        "result": "Result<usize, Error>"
                    },
                    "parameters": [
                        {
                            "text": "array: &[T]"
                        }
                    ],
                    "attributes": ["#[inline]"],
                    "body": {
                        "implementation": "array.len()"
                    }
                }
            }
        },
        {
            "id": 2,
            "name": "forLoop",
            "category": "control",
            "description": "Execute code for each element in a collection",
            "implementations": {
                "typescript": {
                    "accessModifier": "public",
                    "isStatic": "static",
                    "isAsync": "",
                    "isFinal": "",
                    "isAbstract": "",
                    "returnType": "void",
                    "genericTypes": "<T>",
                    "genericConstraints": "",
                    "parameters": [
                        {
                            "text": "array: T[]",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "callback: (item: T, index: number) => void",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        }
                    ],
                    "throws": "",
                    "bodyPrefix": "{",
                    "bodySuffix": "}",
                    "decorators": "",
                    "attributes": "",
                    "validation": "if (!array || !callback) return;",
                    "implementation": "for (let i = 0; i < array.length; i++) {\n    callback(array[i], i);\n}",
                    "errorHandling": "",
                    "lifetimeAnnotations": "",
                    "mutabilityModifiers": "",
                    "typeGuards": "if (!Array.isArray(array)) return;",
                    "yieldStatements": "",
                    "asyncModifiers": ""
                },
                "python": {
                    "accessModifier": "",
                    "isStatic": "@staticmethod",
                    "isAsync": "",
                    "isFinal": "",
                    "isAbstract": "",
                    "returnType": "-> None",
                    "genericTypes": "[T]",
                    "genericConstraints": "",
                    "parameters": [
                        {
                            "text": "array: list[T]",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "callback: Callable[[T, int], None]",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        }
                    ],
                    "throws": "",
                    "bodyPrefix": ":",
                    "bodySuffix": "",
                    "decorators": "",
                    "attributes": "",
                    "validation": "if not array or not callback: return",
                    "implementation": "for i, item in enumerate(array):\n    callback(item, i)",
                    "errorHandling": "",
                    "lifetimeAnnotations": "",
                    "mutabilityModifiers": "",
                    "typeGuards": "if not isinstance(array, list): return",
                    "yieldStatements": "",
                    "asyncModifiers": ""
                }
            }
        },
        {
            "id": 3,
            "name": "ifCondition",
            "category": "control",
            "description": "Execute code based on a condition",
            "implementations": {
                "typescript": {
                    "accessModifier": "public",
                    "isStatic": "static",
                    "isAsync": "",
                    "isFinal": "",
                    "isAbstract": "",
                    "returnType": "void",
                    "genericTypes": "",
                    "genericConstraints": "",
                    "parameters": [
                        {
                            "text": "condition: boolean",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "thenCallback: () => void",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "elseCallback: () => void",
                            "defaultValue": "",
                            "isOptional": "?",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        }
                    ],
                    "throws": "",
                    "bodyPrefix": "{",
                    "bodySuffix": "}",
                    "decorators": "",
                    "attributes": "",
                    "validation": "if (typeof condition !== 'boolean' || !thenCallback) return;",
                    "implementation": "if (condition) {\n    thenCallback();\n} else if (elseCallback) {\n    elseCallback();\n}",
                    "errorHandling": "",
                    "lifetimeAnnotations": "",
                    "mutabilityModifiers": "",
                    "typeGuards": "",
                    "yieldStatements": "",
                    "asyncModifiers": ""
                },
                "python": {
                    "accessModifier": "",
                    "isStatic": "@staticmethod",
                    "isAsync": "",
                    "isFinal": "",
                    "isAbstract": "",
                    "returnType": "-> None",
                    "genericTypes": "",
                    "genericConstraints": "",
                    "parameters": [
                        {
                            "text": "condition: bool",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "then_callback: Callable[[], None]",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "else_callback: Optional[Callable[[], None]]",
                            "defaultValue": "None",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        }
                    ],
                    "throws": "",
                    "bodyPrefix": ":",
                    "bodySuffix": "",
                    "decorators": "",
                    "attributes": "",
                    "validation": "if not isinstance(condition, bool) or not callable(then_callback): return",
                    "implementation": "if condition:\n    then_callback()\nelif else_callback:\n    else_callback()",
                    "errorHandling": "",
                    "lifetimeAnnotations": "",
                    "mutabilityModifiers": "",
                    "typeGuards": "",
                    "yieldStatements": "",
                    "asyncModifiers": ""
                }
            }
        },
        {
            "id": 4,
            "name": "switchCase",
            "category": "control",
            "description": "Execute different code based on a value",
            "implementations": {
                "typescript": {
                    "accessModifier": "public",
                    "isStatic": "static",
                    "isAsync": "",
                    "isFinal": "",
                    "isAbstract": "",
                    "returnType": "void",
                    "genericTypes": "<T>",
                    "genericConstraints": "",
                    "parameters": [
                        {
                            "text": "value: T",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "cases: Map<T, () => void>",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "defaultCase: () => void",
                            "defaultValue": "",
                            "isOptional": "?",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        }
                    ],
                    "throws": "",
                    "bodyPrefix": "{",
                    "bodySuffix": "}",
                    "decorators": "",
                    "attributes": "",
                    "validation": "if (!cases) return;",
                    "implementation": "const handler = cases.get(value);\nif (handler) {\n    handler();\n} else if (defaultCase) {\n    defaultCase();\n}",
                    "errorHandling": "",
                    "lifetimeAnnotations": "",
                    "mutabilityModifiers": "",
                    "typeGuards": "",
                    "yieldStatements": "",
                    "asyncModifiers": ""
                },
                "python": {
                    "accessModifier": "",
                    "isStatic": "@staticmethod",
                    "isAsync": "",
                    "isFinal": "",
                    "isAbstract": "",
                    "returnType": "-> None",
                    "genericTypes": "[T]",
                    "genericConstraints": "",
                    "parameters": [
                        {
                            "text": "value: T",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "cases: dict[T, Callable[[], None]]",
                            "defaultValue": "",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        },
                        {
                            "text": "default_case: Optional[Callable[[], None]]",
                            "defaultValue": "None",
                            "isOptional": "",
                            "isRest": "",
                            "isReference": "",
                            "decorators": ""
                        }
                    ],
                    "throws": "",
                    "bodyPrefix": ":",
                    "bodySuffix": "",
                    "decorators": "",
                    "attributes": "",
                    "validation": "if not cases: return",
                    "implementation": "handler = cases.get(value)\nif handler:\n    handler()\nelif default_case:\n    default_case()",
                    "errorHandling": "",
                    "lifetimeAnnotations": "",
                    "mutabilityModifiers": "",
                    "typeGuards": "",
                    "yieldStatements": "",
                    "asyncModifiers": ""
                }
            }
        }
    ]
} 