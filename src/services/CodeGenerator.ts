import { Node, Edge } from 'reactflow';
import { CustomNodeData } from '../components/nodes/CustomNodes';

export type Language = 'python' | 'javascript' | 'cpp' | 'pseudocode';

interface CodeGeneratorOptions {
  language: Language;
  indentSize?: number;
}

export class CodeGenerator {
  private language: Language;
  private indentSize: number;
  private indent: string;

  constructor(options: CodeGeneratorOptions) {
    this.language = options.language;
    this.indentSize = options.indentSize || 4;
    this.indent = ' '.repeat(this.indentSize);
  }

  generateCode(nodes: Node<CustomNodeData>[], edges: Edge[]): string {
    switch (this.language) {
      case 'python':
        return this.generatePythonCode(nodes, edges);
      case 'javascript':
        return this.generateJavaScriptCode(nodes, edges);
      case 'cpp':
        return this.generateCppCode(nodes, edges);
      case 'pseudocode':
        return this.generatePseudoCode(nodes, edges);
      default:
        return '';
    }
  }

  private generatePythonCode(nodes: Node<CustomNodeData>[], edges: Edge[]): string {
    let code = '# Generated by VVS\n\n';

    // Generate function definitions
    nodes.forEach(node => {
      if (!node.data) return;
      
      switch (node.type) {
        case 'ifStatement':
          code += this.generatePythonIfStatement(node);
          break;
        case 'print':
          code += this.generatePythonPrint(node);
          break;
        // Add more node types here
      }
    });

    // Generate main execution block
    code += '\n# Main execution\n';
    code += 'if __name__ == "__main__":\n';
    code += `${this.indent}# Add your execution code here\n`;
    code += `${this.indent}pass\n`;

    return code;
  }

  private generateJavaScriptCode(nodes: Node<CustomNodeData>[], edges: Edge[]): string {
    let code = '// Generated by VVS\n\n';
    
    // Generate function definitions
    nodes.forEach(node => {
      if (!node.data) return;
      
      switch (node.type) {
        case 'ifStatement':
          code += this.generateJavaScriptIfStatement(node);
          break;
        case 'print':
          code += this.generateJavaScriptPrint(node);
          break;
        // Add more node types here
      }
    });

    return code;
  }

  private generateCppCode(nodes: Node<CustomNodeData>[], edges: Edge[]): string {
    let code = '// Generated by VVS\n\n';
    code += '#include <iostream>\n\n';
    code += 'using namespace std;\n\n';
    
    // Generate function definitions
    nodes.forEach(node => {
      if (!node.data) return;
      
      switch (node.type) {
        case 'ifStatement':
          code += this.generateCppIfStatement(node);
          break;
        case 'print':
          code += this.generateCppPrint(node);
          break;
        // Add more node types here
      }
    });

    // Generate main function
    code += '\nint main() {\n';
    code += `${this.indent}// Add your execution code here\n`;
    code += `${this.indent}return 0;\n`;
    code += '}\n';

    return code;
  }

  private generatePseudoCode(nodes: Node<CustomNodeData>[], edges: Edge[]): string {
    let code = 'ALGORITHM VVS_Flow\n\n';

    // Generate function definitions
    nodes.forEach(node => {
      if (!node.data) return;
      
      switch (node.type) {
        case 'ifStatement':
          code += this.generatePseudoIfStatement(node);
          break;
        case 'print':
          code += this.generatePseudoPrint(node);
          break;
        // Add more node types here
      }
    });

    // Generate main execution block
    code += '\nBEGIN MAIN\n';
    code += `${this.indent}// Your execution code here\n`;
    code += 'END MAIN\n';

    return code;
  }

  private generatePythonIfStatement(node: Node<CustomNodeData>): string {
    const { inputs = [], outputs = [] } = node.data;
    const condition = inputs.find(input => input.id === 'condition');
    return `def ${node.id}_if():\n${this.indent}condition = True  # ${condition?.label || 'Replace with actual condition'}\n${this.indent}if condition:\n${this.indent}${this.indent}pass\n\n`;
  }

  private generatePythonPrint(node: Node<CustomNodeData>): string {
    const { inputs = [] } = node.data;
    const value = inputs.find(input => input.id === 'value');
    return `def ${node.id}_print():\n${this.indent}print("Hello VVS")  # ${value?.label || 'Replace with actual value'}\n\n`;
  }

  private generateJavaScriptIfStatement(node: Node<CustomNodeData>): string {
    const { inputs = [], outputs = [] } = node.data;
    const condition = inputs.find(input => input.id === 'condition');
    return `function ${node.id}_if() {\n${this.indent}const condition = true;  // ${condition?.label || 'Replace with actual condition'}\n${this.indent}if (condition) {\n${this.indent}${this.indent}// Add your code here\n${this.indent}}\n}\n\n`;
  }

  private generateJavaScriptPrint(node: Node<CustomNodeData>): string {
    const { inputs = [] } = node.data;
    const value = inputs.find(input => input.id === 'value');
    return `function ${node.id}_print() {\n${this.indent}console.log("Hello VVS");  // ${value?.label || 'Replace with actual value'}\n}\n\n`;
  }

  private generateCppIfStatement(node: Node<CustomNodeData>): string {
    const { inputs = [], outputs = [] } = node.data;
    const condition = inputs.find(input => input.id === 'condition');
    return `void ${node.id}_if() {\n${this.indent}bool condition = true;  // ${condition?.label || 'Replace with actual condition'}\n${this.indent}if (condition) {\n${this.indent}${this.indent}// Add your code here\n${this.indent}}\n}\n\n`;
  }

  private generateCppPrint(node: Node<CustomNodeData>): string {
    const { inputs = [] } = node.data;
    const value = inputs.find(input => input.id === 'value');
    return `void ${node.id}_print() {\n${this.indent}cout << "Hello VVS" << endl;  // ${value?.label || 'Replace with actual value'}\n}\n\n`;
  }

  private generatePseudoIfStatement(node: Node<CustomNodeData>): string {
    const { inputs = [], outputs = [] } = node.data;
    const condition = inputs.find(input => input.id === 'condition');
    return `PROCEDURE ${node.id}_if\n${this.indent}IF ${condition?.label || 'condition'} THEN\n${this.indent}${this.indent}// Your code here\n${this.indent}END IF\nEND PROCEDURE\n\n`;
  }

  private generatePseudoPrint(node: Node<CustomNodeData>): string {
    const { inputs = [] } = node.data;
    const value = inputs.find(input => input.id === 'value');
    return `PROCEDURE ${node.id}_print\n${this.indent}DISPLAY "${value?.label || 'message'}"\nEND PROCEDURE\n\n`;
  }
} 