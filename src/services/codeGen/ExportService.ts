/**
 * ExportService
 * 
 * Handles exporting generated code to downloadable files in various formats
 * Currently supports Python (.py) files
 */
import { formatPythonCode } from '../../utils/formatting';

export interface ExportOptions {
  fileName: string;
  includeTimestamp: boolean;
  addDocumentation: boolean;
  formatCode: boolean;
}

export class ExportService {
  private static instance: ExportService;

  /**
   * Get singleton instance of ExportService
   */
  public static getInstance(): ExportService {
    if (!ExportService.instance) {
      ExportService.instance = new ExportService();
    }
    return ExportService.instance;
  }

  private constructor() {
    // Private constructor to enforce singleton pattern
  }

  /**
   * Export Python code to a .py file
   * 
   * @param code The generated Python code to export
   * @param options Export options (file name, etc.)
   * @returns Promise that resolves when the export is complete
   */
  public async exportPythonFile(code: string, options: ExportOptions): Promise<void> {
    try {
      let processedCode = code;
      
      // Apply PEP 8 formatting if requested
      if (options.formatCode) {
        processedCode = formatPythonCode(processedCode);
      }

      // Add documentation if requested
      if (options.addDocumentation) {
        processedCode = this.addPythonDocumentation(processedCode, options);
      }
      
      // Generate file name with timestamp if requested
      let fileName = options.fileName;
      if (!fileName.endsWith('.py')) {
        fileName += '.py';
      }
      
      if (options.includeTimestamp) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const nameParts = fileName.split('.');
        fileName = `${nameParts[0]}_${timestamp}.${nameParts[1]}`;
      }

      // Create and download the file
      await this.downloadFile(processedCode, fileName, 'text/plain');
      
      console.log(`Successfully exported Python file: ${fileName}`);
      return Promise.resolve();
    } catch (error) {
      console.error('Error exporting Python file:', error);
      return Promise.reject(error);
    }
  }

  /**
   * Add Python documentation header to the code
   */
  private addPythonDocumentation(code: string, options: ExportOptions): string {
    const timestamp = new Date().toISOString();
    const docString = `"""
Generated by VVS Web Python Visual Programming System
File: ${options.fileName}
Date: ${timestamp}
Description: This file was automatically generated from a visual node graph.
"""

`;
    return docString + code;
  }

  /**
   * Create and download a file in the browser
   */
  private async downloadFile(content: string, fileName: string, contentType: string): Promise<void> {
    // Create a blob with the content
    const blob = new Blob([content], { type: contentType });
    
    // Create a URL for the blob
    const url = URL.createObjectURL(blob);
    
    // Create a temporary anchor element to trigger the download
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    a.style.display = 'none';
    
    // Add to the DOM and trigger the download
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    return Promise.resolve();
  }
} 