---
description: VVS Web Development Guidelines
globs: 
alwaysApply: false
---
## MVP FOCUS
- Implement only features explicitly listed in MVP plan
- No persistence features until post-MVP
- Multi-language code generation with simplified architecture
  - Focus on Python, TypeScript, and C++ for MVP
  - Use configuration-based approach for language definitions
  - Implement a universal code generator that works with all languages
- Ruthlessly question any feature not serving core functionality

## CODE STANDARDS
- Use TypeScript with strict typing
- Follow React functional component patterns
- Use named exports for components
- Document props with JSDoc comments
- Keep components under 150 lines
- One component per file
- Create automated tests after each stage

## STATE MANAGEMENT
- Use Zustand for global state only
- Keep component state local when possible
- Avoid redundant state
- Use immutable patterns for state updates

## NODE SYSTEM
- Each node type in separate file
- Consistent node structure across all types
- Handle null/undefined inputs gracefully
- Validate all connections between nodes

## SOCKET SYSTEM
- Clear visual distinction between socket types
- Strong typing for all socket connections
- Consistent connection validation rules

## CODE GENERATION
- Use a central language registry for managing language configurations
- Define each language via configuration objects, not specialized classes
- Keep language definitions separate from generation logic
- Follow a template-based approach for language syntax
- Ensure consistent code formatting for each language
- Generate code comments that match language-specific syntax
- Write comprehensive tests for each supported language
- Validate generated code against expected output for all node types

## UI COMPONENTS
- Follow Chakra UI patterns for consistency
- Use theme variables, never hardcoded values
- Ensure keyboard accessibility
- Support dark theme only for MVP

## PERFORMANCE
- Memoize expensive calculations
- Avoid re-renders with React.memo for complex nodes
- Use React Flow's built-in optimizations
- Test with at least 50 nodes for performance

## TESTING
- Unit test all node logic
- Test code generation accuracy
- Verify socket connections work as expected
- Include cross-browser testing

## DEVELOPMENT WORKFLOW
- Develop feature branches
- Write tests before implementation
- Maintain a running demo at all times
- Prioritize based on MVP development phases

## POST-MVP PLANNING
- Document potential features for later phases
- Maintain extensible architecture for future features
- Design with persistence in mind, even if not implementing 